/// url = 'http://hl7.org/fhir/StructureMap/ObservationDefinition4to5'
/// name = 'ObservationDefinition4to5'
/// title = 'FML Conversion for ObservationDefinition: R4 to R5'

uses "http://hl7.org/fhir/4.0/StructureDefinition/ObservationDefinition" alias ObservationDefinitionR4 as source
uses "http://hl7.org/fhir/StructureDefinition/ObservationDefinition" alias ObservationDefinitionR5 as target

imports "http://hl7.org/fhir/StructureMap/*4to5"

group ObservationDefinition(source src : ObservationDefinitionR4, target tgt : ObservationDefinitionR5) extends DomainResource <<type+>> {
  src.url -> tgt.url;
  src.identifier -> tgt.identifier;
  src.version -> tgt.version;
  src.versionAlgorithm : string -> tgt.versionAlgorithm;
  src.versionAlgorithm : Coding -> tgt.versionAlgorithm;
  src.name -> tgt.name;
  src.title -> tgt.title;
  src.status -> tgt.status;
  src.experimental -> tgt.experimental;
  src.date -> tgt.date;
  src.publisher -> tgt.publisher;
  src.contact -> tgt.contact;
  src.description -> tgt.description;
  src.useContext -> tgt.useContext;
  src.jurisdiction -> tgt.jurisdiction;
  src.purpose -> tgt.purpose;
  src.copyright -> tgt.copyright;
  src.copyrightLabel -> tgt.copyrightLabel;
  src.approvalDate -> tgt.approvalDate;
  src.lastReviewDate -> tgt.lastReviewDate;
  src.effectivePeriod -> tgt.effectivePeriod;
  src.derivedFromCanonical -> tgt.derivedFromCanonical;
  src.derivedFromUri -> tgt.derivedFromUri;
  src.subject -> tgt.subject;
  src.performerType -> tgt.performerType;
  src.category -> tgt.category;
  src.code -> tgt.code;
  src.permittedDataType -> tgt.permittedDataType;
  src.multipleResultsAllowed -> tgt.multipleResultsAllowed;
  src.bodySite -> tgt.bodySite;
  src.method -> tgt.method;
  src.specimen -> tgt.specimen;
  src.device -> tgt.device;
  src.preferredReportName -> tgt.preferredReportName;
  src.quantitativeDetails as s -> tgt.quantitativeDetails as t then ObservationDefinitionQuantitativeDetails(s,t);
  src.qualifiedValue as s -> tgt.qualifiedValue as t then ObservationDefinitionQualifiedValue(s,t);
  src.hasMember -> tgt.hasMember;
  src.component as s -> tgt.component as t then ObservationDefinitionComponent(s,t);
}

group ObservationDefinitionQuantitativeDetails(source src, target tgt) extends BackboneElement {
  src.unit -> tgt.unit;
  src.customaryUnit -> tgt.customaryUnit;
  src.conversionFactor -> tgt.conversionFactor;
  src.decimalPrecision -> tgt.decimalPrecision;
}

group ObservationDefinitionQualifiedValue(source src, target tgt) extends BackboneElement {
  src.context -> tgt.context;
  src.appliesTo -> tgt.appliesTo;
  src.gender -> tgt.gender;
  src.age -> tgt.age;
  src.gestationalAge -> tgt.gestationalAge;
  src.condition -> tgt.condition;
  src.rangeCategory -> tgt.rangeCategory;
  src.range -> tgt.range;
  src.validCodedValueSet -> tgt.validCodedValueSet;
  src.normalCodedValueSet -> tgt.normalCodedValueSet;
  src.abnormalCodedValueSet -> tgt.abnormalCodedValueSet;
  src.criticalCodedValueSet -> tgt.criticalCodedValueSet;
}

group ObservationDefinitionComponent(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.permittedDataType -> tgt.permittedDataType;
}

