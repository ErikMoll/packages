/// url = 'http://hl7.org/fhir/StructureMap/MeasureReport5to4'
/// name = 'MeasureReport5to4'
/// title = 'FML Conversion for MeasureReport: R5 to R4'

uses "http://hl7.org/fhir/StructureDefinition/MeasureReport" alias MeasureReportR5 as source
uses "http://hl7.org/fhir/4.0/StructureDefinition/MeasureReport" alias MeasureReportR4 as target

imports "http://hl7.org/fhir/StructureMap/*5to4"

group MeasureReport(source src : MeasureReportR5, target tgt : MeasureReportR4) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.status -> tgt.status;
  src.type -> tgt.type;
  src.dataUpdateType -> tgt.dataUpdateType;
  src.measure -> tgt.measure;
  src.subject -> tgt.subject;
  src.date -> tgt.date;
  src.reporter -> tgt.reporter;
  src.reportingVendor -> tgt.reportingVendor;
  src.location -> tgt.location;
  src.period -> tgt.period;
  src.inputParameters -> tgt.inputParameters;
  src.scoring -> tgt.scoring;
  src.improvementNotation -> tgt.improvementNotation;
  src.group as s -> tgt.group as t then MeasureReportGroup(s,t);
  src.evaluatedResource -> tgt.evaluatedResource;
}

group MeasureReportGroup(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.population as s -> tgt.population as t then MeasureReportGroupPopulation(s,t);
  src.measureScore : Quantity -> tgt.measureScore;
  src.measureScore : dateTime -> tgt.measureScore;
  src.measureScore : CodeableConcept -> tgt.measureScore;
  src.measureScore : Period -> tgt.measureScore;
  src.measureScore : Range -> tgt.measureScore;
  src.measureScore : Duration -> tgt.measureScore;
  src.stratifier as s -> tgt.stratifier as t then MeasureReportGroupStratifier(s,t);
}

group MeasureReportGroupPopulation(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.count -> tgt.count;
  src.subjectResults -> tgt.subjectResults;
}

group MeasureReportGroupStratifier(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.stratum as s -> tgt.stratum as t then MeasureReportGroupStratifierStratum(s,t);
}

group MeasureReportGroupStratifierStratum(source src, target tgt) extends BackboneElement {
  src.value : CodeableConcept -> tgt.value;
  src.value : boolean -> tgt.value;
  src.value : Quantity -> tgt.value;
  src.value : Range -> tgt.value;
  src.value : Reference -> tgt.value;
  src.component as s -> tgt.component as t then MeasureReportGroupStratifierStratumComponent(s,t);
  src.population as s -> tgt.population as t then MeasureReportGroupStratifierStratumPopulation(s,t);
  src.measureScore : Quantity -> tgt.measureScore;
  src.measureScore : dateTime -> tgt.measureScore;
  src.measureScore : CodeableConcept -> tgt.measureScore;
  src.measureScore : Period -> tgt.measureScore;
  src.measureScore : Range -> tgt.measureScore;
  src.measureScore : Duration -> tgt.measureScore;
}

group MeasureReportGroupStratifierStratumComponent(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.value : CodeableConcept -> tgt.value;
  src.value : boolean -> tgt.value;
  src.value : Quantity -> tgt.value;
  src.value : Range -> tgt.value;
  src.value : Reference -> tgt.value;
}

group MeasureReportGroupStratifierStratumPopulation(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.count -> tgt.count;
  src.subjectResults -> tgt.subjectResults;
}

